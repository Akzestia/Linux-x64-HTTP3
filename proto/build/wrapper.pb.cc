// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrapper.proto

#include "wrapper.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Wrapper::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : route_{0u},
        payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Wrapper::Wrapper(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrapperDefaultTypeInternal() {}
  union {
    Wrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrapperDefaultTypeInternal _Wrapper_default_instance_;
static ::_pb::Metadata file_level_metadata_wrapper_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_wrapper_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_wrapper_2eproto = nullptr;
const ::uint32_t TableStruct_wrapper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Wrapper, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_.route_),
    PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_.payload_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Wrapper)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_Wrapper_default_instance_._instance,
};
const char descriptor_table_protodef_wrapper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rwrapper.proto\032\nuser.proto\032\ntest.proto\032"
    "\rmessage.proto\032\nauth.proto\032\014report.proto"
    "\032\021invite_link.proto\032\014server.proto\032\017vpn_g"
    "raph.proto\"\205\002\n\007Wrapper\022\025\n\004user\030\001 \001(\0132\005.U"
    "serH\000\022\031\n\006person\030\002 \001(\0132\007.PersonH\000\022\033\n\007mess"
    "age\030\003 \001(\0132\010.MessageH\000\022\025\n\004auth\030\004 \001(\0132\005.Au"
    "thH\000\022\031\n\006report\030\005 \001(\0132\007.ReportH\000\022\031\n\006serev"
    "r\030\006 \001(\0132\007.ServerH\000\022#\n\013invite_link\030\007 \001(\0132"
    "\014.Invite_linkH\000\022\037\n\tvpn_graph\030\010 \001(\0132\n.Vpn"
    "_graphH\000\022\r\n\005route\030\t \001(\rB\t\n\007payloadb\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_wrapper_2eproto_deps[8] =
    {
        &::descriptor_table_auth_2eproto,
        &::descriptor_table_invite_5flink_2eproto,
        &::descriptor_table_message_2eproto,
        &::descriptor_table_report_2eproto,
        &::descriptor_table_server_2eproto,
        &::descriptor_table_test_2eproto,
        &::descriptor_table_user_2eproto,
        &::descriptor_table_vpn_5fgraph_2eproto,
};
static ::absl::once_flag descriptor_table_wrapper_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wrapper_2eproto = {
    false,
    false,
    402,
    descriptor_table_protodef_wrapper_2eproto,
    "wrapper.proto",
    &descriptor_table_wrapper_2eproto_once,
    descriptor_table_wrapper_2eproto_deps,
    8,
    1,
    schemas,
    file_default_instances,
    TableStruct_wrapper_2eproto::offsets,
    file_level_metadata_wrapper_2eproto,
    file_level_enum_descriptors_wrapper_2eproto,
    file_level_service_descriptors_wrapper_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wrapper_2eproto_getter() {
  return &descriptor_table_wrapper_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wrapper_2eproto(&descriptor_table_wrapper_2eproto);
// ===================================================================

class Wrapper::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_._oneof_case_);
  static const ::User& user(const Wrapper* msg);
  static const ::Person& person(const Wrapper* msg);
  static const ::Message& message(const Wrapper* msg);
  static const ::Auth& auth(const Wrapper* msg);
  static const ::Report& report(const Wrapper* msg);
  static const ::Server& serevr(const Wrapper* msg);
  static const ::Invite_link& invite_link(const Wrapper* msg);
  static const ::Vpn_graph& vpn_graph(const Wrapper* msg);
};

const ::User& Wrapper::_Internal::user(const Wrapper* msg) {
  return *msg->_impl_.payload_.user_;
}
const ::Person& Wrapper::_Internal::person(const Wrapper* msg) {
  return *msg->_impl_.payload_.person_;
}
const ::Message& Wrapper::_Internal::message(const Wrapper* msg) {
  return *msg->_impl_.payload_.message_;
}
const ::Auth& Wrapper::_Internal::auth(const Wrapper* msg) {
  return *msg->_impl_.payload_.auth_;
}
const ::Report& Wrapper::_Internal::report(const Wrapper* msg) {
  return *msg->_impl_.payload_.report_;
}
const ::Server& Wrapper::_Internal::serevr(const Wrapper* msg) {
  return *msg->_impl_.payload_.serevr_;
}
const ::Invite_link& Wrapper::_Internal::invite_link(const Wrapper* msg) {
  return *msg->_impl_.payload_.invite_link_;
}
const ::Vpn_graph& Wrapper::_Internal::vpn_graph(const Wrapper* msg) {
  return *msg->_impl_.payload_.vpn_graph_;
}
void Wrapper::set_allocated_user(::User* user) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (user) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(message_arena, user, submessage_arena);
    }
    set_has_user();
    _impl_.payload_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.user)
}
void Wrapper::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kUser) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.user_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_person(::Person* person) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (person) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(person)->GetArena();
    if (message_arena != submessage_arena) {
      person = ::google::protobuf::internal::GetOwnedMessage(message_arena, person, submessage_arena);
    }
    set_has_person();
    _impl_.payload_.person_ = person;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.person)
}
void Wrapper::clear_person() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kPerson) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.person_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_message(::Message* message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(message_arena, message, submessage_arena);
    }
    set_has_message();
    _impl_.payload_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.message)
}
void Wrapper::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.message_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_auth(::Auth* auth) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(auth)->GetArena();
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(message_arena, auth, submessage_arena);
    }
    set_has_auth();
    _impl_.payload_.auth_ = auth;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.auth)
}
void Wrapper::clear_auth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kAuth) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.auth_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_report(::Report* report) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (report) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(report)->GetArena();
    if (message_arena != submessage_arena) {
      report = ::google::protobuf::internal::GetOwnedMessage(message_arena, report, submessage_arena);
    }
    set_has_report();
    _impl_.payload_.report_ = report;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.report)
}
void Wrapper::clear_report() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kReport) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.report_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_serevr(::Server* serevr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (serevr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(serevr)->GetArena();
    if (message_arena != submessage_arena) {
      serevr = ::google::protobuf::internal::GetOwnedMessage(message_arena, serevr, submessage_arena);
    }
    set_has_serevr();
    _impl_.payload_.serevr_ = serevr;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.serevr)
}
void Wrapper::clear_serevr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kSerevr) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.serevr_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_invite_link(::Invite_link* invite_link) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (invite_link) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(invite_link)->GetArena();
    if (message_arena != submessage_arena) {
      invite_link = ::google::protobuf::internal::GetOwnedMessage(message_arena, invite_link, submessage_arena);
    }
    set_has_invite_link();
    _impl_.payload_.invite_link_ = invite_link;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.invite_link)
}
void Wrapper::clear_invite_link() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kInviteLink) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.invite_link_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_vpn_graph(::Vpn_graph* vpn_graph) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (vpn_graph) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(vpn_graph)->GetArena();
    if (message_arena != submessage_arena) {
      vpn_graph = ::google::protobuf::internal::GetOwnedMessage(message_arena, vpn_graph, submessage_arena);
    }
    set_has_vpn_graph();
    _impl_.payload_.vpn_graph_ = vpn_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.vpn_graph)
}
void Wrapper::clear_vpn_graph() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kVpnGraph) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.vpn_graph_;
    }
    clear_has_payload();
  }
}
Wrapper::Wrapper(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Wrapper)
}
inline PROTOBUF_NDEBUG_INLINE Wrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Wrapper::Wrapper(
    ::google::protobuf::Arena* arena,
    const Wrapper& from)
    : ::google::protobuf::Message(arena) {
  Wrapper* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.route_ = from._impl_.route_;
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kUser:
        _impl_.payload_.user_ = CreateMaybeMessage<::User>(arena, *from._impl_.payload_.user_);
        break;
      case kPerson:
        _impl_.payload_.person_ = CreateMaybeMessage<::Person>(arena, *from._impl_.payload_.person_);
        break;
      case kMessage:
        _impl_.payload_.message_ = CreateMaybeMessage<::Message>(arena, *from._impl_.payload_.message_);
        break;
      case kAuth:
        _impl_.payload_.auth_ = CreateMaybeMessage<::Auth>(arena, *from._impl_.payload_.auth_);
        break;
      case kReport:
        _impl_.payload_.report_ = CreateMaybeMessage<::Report>(arena, *from._impl_.payload_.report_);
        break;
      case kSerevr:
        _impl_.payload_.serevr_ = CreateMaybeMessage<::Server>(arena, *from._impl_.payload_.serevr_);
        break;
      case kInviteLink:
        _impl_.payload_.invite_link_ = CreateMaybeMessage<::Invite_link>(arena, *from._impl_.payload_.invite_link_);
        break;
      case kVpnGraph:
        _impl_.payload_.vpn_graph_ = CreateMaybeMessage<::Vpn_graph>(arena, *from._impl_.payload_.vpn_graph_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:Wrapper)
}
inline PROTOBUF_NDEBUG_INLINE Wrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Wrapper::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.route_ = {};
}
Wrapper::~Wrapper() {
  // @@protoc_insertion_point(destructor:Wrapper)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Wrapper::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
  _impl_.~Impl_();
}

void Wrapper::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:Wrapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (payload_case()) {
    case kUser: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.user_;
      }
      break;
    }
    case kPerson: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.person_;
      }
      break;
    }
    case kMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.message_;
      }
      break;
    }
    case kAuth: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.auth_;
      }
      break;
    }
    case kReport: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.report_;
      }
      break;
    }
    case kSerevr: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.serevr_;
      }
      break;
    }
    case kInviteLink: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.invite_link_;
      }
      break;
    }
    case kVpnGraph: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.vpn_graph_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


PROTOBUF_NOINLINE void Wrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:Wrapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_ = 0u;
  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Wrapper::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 9, 8, 0, 2> Wrapper::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Wrapper_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 route = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Wrapper, _impl_.route_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.route_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .User user = 1;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.user_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Person person = 2;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.person_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Message message = 3;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.message_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Auth auth = 4;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.auth_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Report report = 5;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.report_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Server serevr = 6;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.serevr_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Invite_link invite_link = 7;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.invite_link_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Vpn_graph vpn_graph = 8;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.payload_.vpn_graph_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 route = 9;
    {PROTOBUF_FIELD_OFFSET(Wrapper, _impl_.route_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::User>()},
    {::_pbi::TcParser::GetTable<::Person>()},
    {::_pbi::TcParser::GetTable<::Message>()},
    {::_pbi::TcParser::GetTable<::Auth>()},
    {::_pbi::TcParser::GetTable<::Report>()},
    {::_pbi::TcParser::GetTable<::Server>()},
    {::_pbi::TcParser::GetTable<::Invite_link>()},
    {::_pbi::TcParser::GetTable<::Vpn_graph>()},
  }}, {{
  }},
};

::uint8_t* Wrapper::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wrapper)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (payload_case()) {
    case kUser: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::user(this),
          _Internal::user(this).GetCachedSize(), target, stream);
      break;
    }
    case kPerson: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::person(this),
          _Internal::person(this).GetCachedSize(), target, stream);
      break;
    }
    case kMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::message(this),
          _Internal::message(this).GetCachedSize(), target, stream);
      break;
    }
    case kAuth: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::auth(this),
          _Internal::auth(this).GetCachedSize(), target, stream);
      break;
    }
    case kReport: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::report(this),
          _Internal::report(this).GetCachedSize(), target, stream);
      break;
    }
    case kSerevr: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::serevr(this),
          _Internal::serevr(this).GetCachedSize(), target, stream);
      break;
    }
    case kInviteLink: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::invite_link(this),
          _Internal::invite_link(this).GetCachedSize(), target, stream);
      break;
    }
    case kVpnGraph: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::vpn_graph(this),
          _Internal::vpn_graph(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // uint32 route = 9;
  if (this->_internal_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_route(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wrapper)
  return target;
}

::size_t Wrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Wrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 route = 9;
  if (this->_internal_route() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_route());
  }

  switch (payload_case()) {
    // .User user = 1;
    case kUser: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.user_);
      break;
    }
    // .Person person = 2;
    case kPerson: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.person_);
      break;
    }
    // .Message message = 3;
    case kMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.message_);
      break;
    }
    // .Auth auth = 4;
    case kAuth: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.auth_);
      break;
    }
    // .Report report = 5;
    case kReport: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.report_);
      break;
    }
    // .Server serevr = 6;
    case kSerevr: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.serevr_);
      break;
    }
    // .Invite_link invite_link = 7;
    case kInviteLink: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.invite_link_);
      break;
    }
    // .Vpn_graph vpn_graph = 8;
    case kVpnGraph: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.vpn_graph_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Wrapper::_class_data_ = {
    Wrapper::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Wrapper::GetClassData() const {
  return &_class_data_;
}

void Wrapper::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Wrapper*>(&to_msg);
  auto& from = static_cast<const Wrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Wrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_route() != 0) {
    _this->_internal_set_route(from._internal_route());
  }
  switch (from.payload_case()) {
    case kUser: {
      _this->_internal_mutable_user()->::User::MergeFrom(
          from._internal_user());
      break;
    }
    case kPerson: {
      _this->_internal_mutable_person()->::Person::MergeFrom(
          from._internal_person());
      break;
    }
    case kMessage: {
      _this->_internal_mutable_message()->::Message::MergeFrom(
          from._internal_message());
      break;
    }
    case kAuth: {
      _this->_internal_mutable_auth()->::Auth::MergeFrom(
          from._internal_auth());
      break;
    }
    case kReport: {
      _this->_internal_mutable_report()->::Report::MergeFrom(
          from._internal_report());
      break;
    }
    case kSerevr: {
      _this->_internal_mutable_serevr()->::Server::MergeFrom(
          from._internal_serevr());
      break;
    }
    case kInviteLink: {
      _this->_internal_mutable_invite_link()->::Invite_link::MergeFrom(
          from._internal_invite_link());
      break;
    }
    case kVpnGraph: {
      _this->_internal_mutable_vpn_graph()->::Vpn_graph::MergeFrom(
          from._internal_vpn_graph());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Wrapper::CopyFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Wrapper::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Wrapper::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Wrapper::InternalSwap(Wrapper* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.route_, other->_impl_.route_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Wrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wrapper_2eproto_getter, &descriptor_table_wrapper_2eproto_once,
      file_level_metadata_wrapper_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
